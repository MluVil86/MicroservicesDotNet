services:
 mongodb:
    image: mongo:latest
    ports: 
     - "27017:27017"
    volumes:
     - /c/docker_local/scripts/mongo/mongo-init:/docker-entrypoint-initdb.d
     - /c/docker_local/mongo:/data/db
    networks:
     - orders-mongo-network

 mysqldb:
    image: mysql:8.4.3
    environment:
     MYSQL_ROOT_PASSWORD: p@ssw0rd
    volumes:
     - /c/docker_local/scripts/mysql/mysql-init:/docker-entrypoint-initdb.d
     - /c/docker_local/mysql:/var/lib/mysql
    command: --lower_case_table_names=1
    networks:
     - products-mysql-network
    ports:
     - "3307:3306"
    hostname: mysql-host-productsmicroservice

 postgresdb:
   image: postgres:14.18
   environment:
    POSTGRES_PASSWORD: p@ssw0rd
    POSTGRES_USER: admin
    POSTGRES_DB: eCommerceUsers
   volumes:
    - /c/docker_local/scripts/psql/postgres-init:/docker-entrypoint-initdb.d 
    - /c/docker_local/psql:/var/lib/postgresql/data
   networks:
    - users-postgres-network
   ports:
    - "5432:5432"
   hostname: mysql-host-productsmicroservice

 users-microservice:
  image: usermicroservice:latest
  environment:
   - ASPNETCORE_HTTP_PORTS=8080
   - ASPNETCORE_ENVIRONMENT=Development
   - POSTGRES_HOST=postgresdb
   - POSTGRES_PORT=5432
   - POSTGRES_DATABASE=eCommerceUsers
   - POSTGRES_USERNAME=admin
   - POSTGRES_PASSWORD=p@ssw0rd  
  ports:
   - "7000:9090"
  networks:
   - ecommerce-microservice-network
   - users-postgres-network
  depends_on:
   - postgresdb

 products-microservice:
  image: productmicroservice:latest
  environment:
   - ASPNETCORE_HTTP_PORTS=8080
   - ASPNETCORE_ENVIRONMENT=Development
   - MYSQL_HOST=mysql-host-productsmicroservice
   - MYSQL_DATABASE=ecommerceproductsdatabase
   - MYSQL_PORT=3306 
   - MYSQL_UID=root
   - MYSQL_PASSWORD=p@ssw0rd   
  ports:
   - "8000:8080"
  networks:
   - ecommerce-microservice-network
   - products-mysql-network
  depends_on:
   - mysqldb

 orderservice.api:
    image: ${DOCKER_REGISTRY-}orderserviceapi
    build:
      context: .
      dockerfile: OrdersService.API/Dockerfile
    environment:
     - MONGO_HOST=mongodb
     - MONGO_PORT=27017
     - MONGO_DATABASE=OrdersDatabase
     - UsersMicroserviceURI=apigateway
     - UsersMicroservicePort=8080
     - ProductsMicroserviceURI=apigateway
     - ProductsMicroservicePort=8080
     - REDIS_HOST=redis-cache
     - REDIS_PORT=6379 
    ports:
     - "4000:8080"
    networks:
     - ecommerce-microservice-network
     - orders-mongo-network
    depends_on:
     - mongodb
     - users-microservice
 
 redis-cache:
   image: redis:8.2.0
   ports:
    - "6379:6379"
   volumes:
   - /c/docker_local/redis:/data
   networks:
   - ecommerce-microservice-network

 apigateway:
  image: apigateway
  build:
   context: .
   dockerfile: /ApiGateway/Dockerfile
  ports:
   - "2000:8080"
  networks:
   - ecommerce-microservice-network


networks:
 ecommerce-microservice-network:
    driver: bridge 
 products-mysql-network:
    driver: bridge   
 users-postgres-network:
    driver: bridge  
 orders-mongo-network:
    driver: bridge 
  
